title: "LightnCandy: Custom Helper"
lcresult:
  Compile option 'helpers':
    note: "When <code>compile()</code>, you can use the compile option <code>helpers</code> to provide helpers. <b>NOTICE</b>: <code>FLAG_NAMEDARG</code> is required for named arguments, <code>FLAG_ADVARNAME</code> is required for string or subexpression arguments"
    code: |
      require_once('./vendor/autoload.php');
      use LightnCandy\LightnCandy;

      function my_helper_function () {
          return 'OK! (my_helper_function)';
      }

      function my_other_helper () {
          return 'OK! (my_other_helper)';
      }

      class myClass {
          public static function myStaticMethod () {
              return 'OK! (myClass::myStaticMethod)';
          }
      }

      $template = "1. {{my_helper_function}}\n2. {{myClass::myStaticMethod}}\n3. {{helper_name}}\n4. {{helper_name2}}\n5. {{helper_name3}}";
      $phpStr = LightnCandy::compile($template, array(
          'flags' => LightnCandy::FLAG_HANDLEBARS,
          'helpers' => array(
              // 1. You may pass your function name
              //    When the function is not exist, you get compile time error
              //    Template: {{my_helper_functoin ....}}
              'my_helper_function',

              // 2. You may also provide a static call from a class
              //    In this case, the helper name is same with provided full name
              //    Template: {{myClass::myStaticMethod ....}}
              'myClass::myStaticMethod',

              // 3. You may also provide an alias name for helper function
              //    This help you to mapping different function to a preferred helper name
              //    Template: {{helper_name ....}}
              'helper_name' => 'my_other_helper',

              // 4. Alias also works well for static call of a class
              //    This help you to mapping different function to a preferred helper name
              //    Template: {{helper_name2 ....}}
              'helper_name2' => 'myClass::myStaticMethod',
      
              // 5. Anonymous function should be provided with alias
              //    The function will be included in generaed code always
              //    Template: {{helper_name3 ....}}
              'helper_name3' => function () {
                  return 'OK! (helper_name3)';
              }
          )
      ));
      $renderer = LightnCandy::prepare($phpStr);
      echo $renderer(null);
ref:
  - http://handlebarsjs.com/expressions.html
  - http://handlebarsjs.com/block_helpers.html
  - 0021-customhelper
  - 0023-namedarguments
  - LC-FLAG_NAMEDARG
  - LC-FLAG_ADVARNAME
