title: Dynamic Partial
hbonly: true
description: "You can use a subexpression as partial name. The partial name will be decided by the result of custom helper at run time."
Samples:
  quicksample:
    - template: "{{>(foo 1)}}, {{>(foo 2)}}"
      note: "The return value of helper <code>foo</code> will be partial name"
      partial:
        bar1: "Hello"
        bar2: "World"
      helper:
        foo: >
          function ($arg1) {
              return 'bar' . $arg1;
            }
      option:
        lightncandy:
          - FLAG_ADVARNAME
          - FLAG_RUNTIMEPARTIAL
      data:
        null
    - template: "{{>(foo)}}"
      note: "When partial name is not exist it will cause runtime error"
      fail: true
      errorlog: true
      partial:
        bar1: "Hello"
        bar2: "World"
      helper:
        foo: >
          function () {
              return 'bar_not_found';
            }
      option:
        lightncandy:
          - FLAG_ADVARNAME
          - FLAG_RUNTIMEPARTIAL
      data:
        null
    - template: "{{#each foo}}{{> (lookup . 'template')}}{{/each}}"
      note: "You can use the lookup helper to return the template's name from an object"
      partial:
        en: "Hello {{name}}. "
        es: "Hola {{name}}. "
        fr: "Bonjour {{name}}."
      data:
        foo: [{template: "en", name: "alice"},{template: "es", name: "bob"},{template: "fr", name: "casey"}]
      option:
        lightncandy:
          - FLAG_ADVARNAME
          - FLAG_RUNTIMEPARTIAL
    - template: "{{#each foo}}{{> (bar .)}}{{/each}}"
      note: "You can use dynamic partials to load templates from within a list of their names"
      partial:
        a: "Hello"
        b: "World"
        c: "!"
      helper:
        bar: >
          function ($arg) {
            return $arg;
          }
      data:
        foo: ["a","b","c"]
      option:
        lightncandy:
          - FLAG_ADVARNAME
          - FLAG_RUNTIMEPARTIAL
ref:
  - 0021-customhelper
  - LC-FLAG_ADVARNAME
  - LC-FLAG_RUNTIMEPARTIAL
