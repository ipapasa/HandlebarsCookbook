description: 
  Compile the partial as callable. This enables recursive partials or context change for partials.
lcsample:
  - template: "OK{{> foo}}!"
    note: Default is to compile the partial as static code
    showcode: true
    option:
      - FLAG_JSOBJECT
    partial:
      foo: "{{hello}}"
  - template: "OK{{> foo}}!"
    note: Compile used partial as embed callable code
    showcode: true
    option:
      - FLAG_JSOBJECT
      - FLAG_RUNTIMEPARTIAL
    partial:
      foo: "{{hello}}"
      moo: "{{not used}}"
  - template: "OK{{> foo bar}}!"
    note: Default to not support context change on partial
    compileerror: true
    errorlog: true
    option:
      - FLAG_ERROR_LOG
    partial:
      foo: "{{hello}}"
  - template: "OK{{> foo bar}}!"
    note: Use another context for the partial
    data:
      bar:
        hello: World
    option:
      - FLAG_RUNTIMEPARTIAL
    partial:
      foo: "{{hello}}"
  - template: "{{> (foo)}}"
    note: When using dynamic partial, all partials will be compiled into your render function.
    data: null
    partial:
      foo1: Partial foo one
      foo2: Partial foo two
      foo3: Partial foo three
    option:
      - FLAG_RUNTIMEPARTIAL
    helper:
      foo: >
        function () {
            return 'foo2';
          }
ref:
  - 0024-partialcontext
